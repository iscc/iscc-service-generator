# -*- coding: utf-8 -*-
from pydantic import BaseModel as OriginalBaseModel
from pydantic import root_validator


class BaseModel(OriginalBaseModel):
    """Overrides for autogenerated Pydantic Models"""

    class Config:
        extra = "ignore"
        validate_assignment = True
        use_enum_values = True
        orm_mode = True

    @root_validator(pre=True)
    def empty_string_to_default(cls, values):
        """Convert `empty` sting values to `None`."""
        cleaned = {}
        for k, v in values.items():
            cleaned[k] = v if v else None
        return cleaned

    def dict(self, *args, exclude_none=True, exclude_unset=True, by_alias=True, **kwargs):
        """
        Overide defaults to exclude `None` and unset values and translate aliases.

        !!! note
            This overides the default BaseModel.dict()
        """
        return super().dict(
            *args,
            exclude_none=exclude_none,
            exclude_unset=exclude_unset,
            by_alias=by_alias,
            **kwargs,
        )
